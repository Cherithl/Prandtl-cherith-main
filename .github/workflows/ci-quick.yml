name: CI Quick

on:
  pull_request:
  push:
    branches: [main]

jobs:
  build-test:
    name: Ubuntu 22.04 â€¢ MPICH + GCC-12
    runs-on: ubuntu-22.04
    env:
      CMAKE_BUILD_TYPE: RelWithDebInfo
      INSTALL_PREFIX: ${{ github.workspace }}/deps
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install toolchain and deps (MPI, hypre, metis)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-12 g++-12 gfortran-12 \
            mpich libmpich-dev \
            libhypre-dev libmetis-dev \
            cmake ninja-build pkg-config ccache
          echo "CC=mpicc"   >> $GITHUB_ENV
          echo "CXX=mpicxx" >> $GITHUB_ENV
          echo "FC=mpifort" >> $GITHUB_ENV

      - name: Locate MFEM submodule
        id: mfemloc
        shell: bash
        run: |
          set -euo pipefail
          MFEM_SRC=""
          for d in external/mfem third_party/mfem mfem submodules/mfem; do
            if [[ -d "$d" ]]; then MFEM_SRC="$d"; break; fi
          done
          if [[ -z "$MFEM_SRC" ]]; then
            echo "ERROR: Could not find MFEM submodule. Expected one of: external/mfem, third_party/mfem, mfem, submodules/mfem" >&2
            exit 1
          fi
          echo "MFEM_SRC=$MFEM_SRC" | tee -a $GITHUB_ENV

      - name: Configure & build MFEM (MPI + HYPRE + METIS)
        run: |
          cmake -S "$MFEM_SRC" -B "$MFEM_SRC/build" -G Ninja \
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
            -DMFEM_USE_MPI=ON \
            -DMFEM_USE_METIS=ON \
            -DMFEM_USE_HYPRE=ON \
            -DMETIS_DIR=/usr \
            -DHYPRE_DIR=/usr
          cmake --build "$MFEM_SRC/build" --target install -j2
        env:
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          FC: ${{ env.FC }}

      - name: Configure Prandtl
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
            -DBUILD_TESTING=ON \
            -DMFEM_DIR="${INSTALL_PREFIX}"
        env:
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          FC: ${{ env.FC }}

      - name: Build Prandtl
        run: cmake --build build -- -k 0

      - name: Smoke tests
        run: ctest --test-dir build -L smoke -j2 --output-on-failure

      - name: Upload quick artifacts (logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prandtl-quick-logs
          path: |
            build/Testing/**/Test.xml
            build/CMakeCache.txt
            build/**/*.log
